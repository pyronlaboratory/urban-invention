[
  {
    "name": "test.java",
    "path": "test.java",
    "content": {
      "structured": {
        "description": "A class `KnightsTour` that contains a method `size()` which calculates the number of live cells in a chessboard grid based on random placement of mines and non-mine squares. The class also has a main method that tries to find a path of live cells from the top left corner to the bottom right corner of the grid, and prints the solution if found. The code uses the `java.util` package for lists and arrays, and the `Math` class for random number generation.",
        "items": [
          {
            "id": "7f4fa8dc-707f-28a1-1a4f-e2e3cf88867d",
            "ancestors": [],
            "description": "Is a solver for the classic problem of finding a path that visits every square on a board once and returns to the starting position without stepping on any mines. The class takes in the dimensions of the grid and initial row and column as inputs, and then uses a recursive or iterative approach to find the solution. The class also includes methods for neighbors and countNeighbors, which are used to determine the number of neighbors for each position reached by moving from the current position to the target position.",
            "name": "KnightsTour",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 160,
            "docLength": null
          },
          {
            "id": "eb98285b-f8b6-d7be-154d-7cbc8675350e",
            "ancestors": [
              "7f4fa8dc-707f-28a1-1a4f-e2e3cf88867d"
            ],
            "description": "Calculates the number of nodes in a linked list, iterating through the list from the starting node until reaching the end.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "the number of nodes in the linked list.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        MyLinkedList list = new MyLinkedList();\n        System.out.println(\"Size of the list: \" + list.size());\n    }\n}\n",
              "description": ""
            },
            "name": "size",
            "location": {
              "start": 4,
              "insert": 4,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "3bdb2ac0-cc26-778d-cc48-59c41b24a09b",
            "ancestors": [
              "7f4fa8dc-707f-28a1-1a4f-e2e3cf88867d"
            ],
            "description": "Determines whether a given cell can be filled with a specific number of mines by exploring its neighboring cells and recursively calling itself until reaching a solution or determining that no such solution exists.",
            "params": [
              {
                "name": "row",
                "type_name": "int",
                "description": "2D coordinate of a cell in the grid that is being analyzed and updated during the algorithm's execution.",
                "complex_type": false
              },
              {
                "name": "column",
                "type_name": "int",
                "description": "2D coordinate of the cell in the grid, which is used to determine the neighboring cells and check for orphans in the grid.",
                "complex_type": false
              },
              {
                "name": "count",
                "type_name": "int",
                "description": "2D coordinate's neighbor grid count, which is used to determine whether an orphan exists at that location and to recursively solve the puzzle.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the Sudoku puzzle has been solved.",
              "complex_type": false
            },
            "name": "solve",
            "location": {
              "start": 67,
              "insert": 67,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 25,
            "docLength": null
          },
          {
            "id": "5c14b883-5a79-bd99-834b-2ec4c0ed20ab",
            "ancestors": [
              "7f4fa8dc-707f-28a1-1a4f-e2e3cf88867d"
            ],
            "description": "Counts the number of neighbors of a given cell in a grid, based on the values of other cells in the grid.",
            "params": [
              {
                "name": "row",
                "type_name": "int",
                "description": "2D coordinate of the current cell in the grid, which is used to determine the neighbors of that cell.",
                "complex_type": false
              },
              {
                "name": "column",
                "type_name": "int",
                "description": "2D position of the cell in the grid, which is used to determine which cells are neighbors of the specified row and column.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "the number of adjacent cells in the grid that are marked as 0.",
              "complex_type": false
            },
            "name": "countNeighbors",
            "location": {
              "start": 128,
              "insert": 128,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "7744eb99-2a11-e480-a04d-72932d8e73e9",
            "ancestors": [
              "7f4fa8dc-707f-28a1-1a4f-e2e3cf88867d"
            ],
            "description": "Determines if a given cell is an orphan based on the number of neighbors it has. If the cell has fewer than the total number of cells minus one neighbor, it is an orphan and the function returns `true`. Otherwise, it returns `false`.",
            "params": [
              {
                "name": "count",
                "type_name": "int",
                "description": "2D grid position's cell value count in the total grid size.",
                "complex_type": false
              },
              {
                "name": "row",
                "type_name": "int",
                "description": "2D coordinate of the current pixel being evaluated for orphan status.",
                "complex_type": false
              },
              {
                "name": "column",
                "type_name": "int",
                "description": "2D coordinate of the current cell being evaluated for orphan status.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether an orphan is detected at the specified row and column.",
              "complex_type": false
            },
            "name": "orphanDetected",
            "location": {
              "start": 139,
              "insert": 139,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "856812f2-026c-52b1-3343-6af38233a4e5",
            "ancestors": [
              "7f4fa8dc-707f-28a1-1a4f-e2e3cf88867d"
            ],
            "description": "Iterates over a 2D grid represented by an array of integers, printing each element on a new line with a space preceding it.",
            "params": [],
            "name": "printResult",
            "location": {
              "start": 151,
              "insert": 151,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          }
        ]
      }
    }
  }
]