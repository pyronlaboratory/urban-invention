[
  {
    "name": "test.java",
    "path": "test.java",
    "content": {
      "structured": {
        "description": "a Sudoku puzzle solver that uses a recursive backtracking algorithm to find a valid solution for a given 2D grid. The algorithm starts by defining a function `solve()` that takes in the current row and column of the grid, as well as a count value representing the number of cells in the grid that have already been solved. The function recursively calls itself until reaching a solution or determining that no such solution exists. It then prints the result to the console using the `printResult()` function.\n\nThe code also defines several utility functions, including `neighbors()`, which returns a list of integer tuples representing the neighbors of a given row and column position on the grid; `countNeighbors()`, which counts the number of adjacent cells in the grid that are marked as 0; and `orphanDetected()`, which checks if a given cell is an orphan based on the number of neighbors it has.",
        "diagram": {
          "path": "test.java",
          "gviz": "",
          "d2": "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" d2Version=\"v0.6.5\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 435 368\"><svg id=\"d2-svg\" class=\"d2-3277132633\" width=\"435\" height=\"368\" viewBox=\"11 11 435 368\"><rect x=\"11.000000\" y=\"11.000000\" width=\"435.000000\" height=\"368.000000\" rx=\"0.000000\" fill=\"#151719\" stroke-width=\"0\" /><style type=\"text/css\"><![CDATA[\n.d2-3277132633 .text {\n\tfont-family: \"d2-3277132633-font-regular\";\n}\n@font-face {\n\tfont-family: d2-3277132633-font-regular;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-3277132633 .text-bold {\n\tfont-family: \"d2-3277132633-font-bold\";\n}\n@font-face {\n\tfont-family: d2-3277132633-font-bold;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}]]></style><style type=\"text/css\"><![CDATA[.shape {\n  shape-rendering: geometricPrecision;\n  stroke-linejoin: round;\n}\n.connection {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n.blend {\n  mix-blend-mode: multiply;\n  opacity: 0.5;\n}\n\n\t\t.d2-3277132633 .fill-N1{fill:#ECEDED;}\n\t\t.d2-3277132633 .fill-N2{fill:#676C7E;}\n\t\t.d2-3277132633 .fill-N3{fill:#9499AB;}\n\t\t.d2-3277132633 .fill-N4{fill:#CFD2DD;}\n\t\t.d2-3277132633 .fill-N5{fill:#DEE1EB;}\n\t\t.d2-3277132633 .fill-N6{fill:#EEF1F8;}\n\t\t.d2-3277132633 .fill-N7{fill:#151719;}\n\t\t.d2-3277132633 .fill-B1{fill:#717D86;}\n\t\t.d2-3277132633 .fill-B2{fill:#717D86;}\n\t\t.d2-3277132633 .fill-B3{fill:#ffff00;}\n\t\t.d2-3277132633 .fill-B4{fill:#151719;}\n\t\t.d2-3277132633 .fill-B5{fill:#151719;}\n\t\t.d2-3277132633 .fill-B6{fill:#151719;}\n\t\t.d2-3277132633 .fill-AA2{fill:#ECEDED;}\n\t\t.d2-3277132633 .fill-AA4{fill:#CFD2DD;}\n\t\t.d2-3277132633 .fill-AA5{fill:#DEE1EB;}\n\t\t.d2-3277132633 .fill-AB4{fill:#CFD2DD;}\n\t\t.d2-3277132633 .fill-AB5{fill:#DEE1EB;}\n\t\t.d2-3277132633 .stroke-N1{stroke:#ECEDED;}\n\t\t.d2-3277132633 .stroke-N2{stroke:#676C7E;}\n\t\t.d2-3277132633 .stroke-N3{stroke:#9499AB;}\n\t\t.d2-3277132633 .stroke-N4{stroke:#CFD2DD;}\n\t\t.d2-3277132633 .stroke-N5{stroke:#DEE1EB;}\n\t\t.d2-3277132633 .stroke-N6{stroke:#EEF1F8;}\n\t\t.d2-3277132633 .stroke-N7{stroke:#151719;}\n\t\t.d2-3277132633 .stroke-B1{stroke:#717D86;}\n\t\t.d2-3277132633 .stroke-B2{stroke:#717D86;}\n\t\t.d2-3277132633 .stroke-B3{stroke:#ffff00;}\n\t\t.d2-3277132633 .stroke-B4{stroke:#151719;}\n\t\t.d2-3277132633 .stroke-B5{stroke:#151719;}\n\t\t.d2-3277132633 .stroke-B6{stroke:#151719;}\n\t\t.d2-3277132633 .stroke-AA2{stroke:#ECEDED;}\n\t\t.d2-3277132633 .stroke-AA4{stroke:#CFD2DD;}\n\t\t.d2-3277132633 .stroke-AA5{stroke:#DEE1EB;}\n\t\t.d2-3277132633 .stroke-AB4{stroke:#CFD2DD;}\n\t\t.d2-3277132633 .stroke-AB5{stroke:#DEE1EB;}\n\t\t.d2-3277132633 .background-color-N1{background-color:#ECEDED;}\n\t\t.d2-3277132633 .background-color-N2{background-color:#676C7E;}\n\t\t.d2-3277132633 .background-color-N3{background-color:#9499AB;}\n\t\t.d2-3277132633 .background-color-N4{background-color:#CFD2DD;}\n\t\t.d2-3277132633 .background-color-N5{background-color:#DEE1EB;}\n\t\t.d2-3277132633 .background-color-N6{background-color:#EEF1F8;}\n\t\t.d2-3277132633 .background-color-N7{background-color:#151719;}\n\t\t.d2-3277132633 .background-color-B1{background-color:#717D86;}\n\t\t.d2-3277132633 .background-color-B2{background-color:#717D86;}\n\t\t.d2-3277132633 .background-color-B3{background-color:#ffff00;}\n\t\t.d2-3277132633 .background-color-B4{background-color:#151719;}\n\t\t.d2-3277132633 .background-color-B5{background-color:#151719;}\n\t\t.d2-3277132633 .background-color-B6{background-color:#151719;}\n\t\t.d2-3277132633 .background-color-AA2{background-color:#ECEDED;}\n\t\t.d2-3277132633 .background-color-AA4{background-color:#CFD2DD;}\n\t\t.d2-3277132633 .background-color-AA5{background-color:#DEE1EB;}\n\t\t.d2-3277132633 .background-color-AB4{background-color:#CFD2DD;}\n\t\t.d2-3277132633 .background-color-AB5{background-color:#DEE1EB;}\n\t\t.d2-3277132633 .color-N1{color:#ECEDED;}\n\t\t.d2-3277132633 .color-N2{color:#676C7E;}\n\t\t.d2-3277132633 .color-N3{color:#9499AB;}\n\t\t.d2-3277132633 .color-N4{color:#CFD2DD;}\n\t\t.d2-3277132633 .color-N5{color:#DEE1EB;}\n\t\t.d2-3277132633 .color-N6{color:#EEF1F8;}\n\t\t.d2-3277132633 .color-N7{color:#151719;}\n\t\t.d2-3277132633 .color-B1{color:#717D86;}\n\t\t.d2-3277132633 .color-B2{color:#717D86;}\n\t\t.d2-3277132633 .color-B3{color:#ffff00;}\n\t\t.d2-3277132633 .color-B4{color:#151719;}\n\t\t.d2-3277132633 .color-B5{color:#151719;}\n\t\t.d2-3277132633 .color-B6{color:#151719;}\n\t\t.d2-3277132633 .color-AA2{color:#ECEDED;}\n\t\t.d2-3277132633 .color-AA4{color:#CFD2DD;}\n\t\t.d2-3277132633 .color-AA5{color:#DEE1EB;}\n\t\t.d2-3277132633 .color-AB4{color:#CFD2DD;}\n\t\t.d2-3277132633 .color-AB5{color:#DEE1EB;}.appendix text.text{fill:#ECEDED}.md{--color-fg-default:#ECEDED;--color-fg-muted:#676C7E;--color-fg-subtle:#9499AB;--color-canvas-default:#151719;--color-canvas-subtle:#EEF1F8;--color-border-default:#717D86;--color-border-muted:#717D86;--color-neutral-muted:#EEF1F8;--color-accent-fg:#717D86;--color-accent-emphasis:#717D86;--color-attention-subtle:#676C7E;--color-danger-fg:red;}.sketch-overlay-B1{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B3{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-B4{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B5{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B6{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-AA2{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AA4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AA5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AB4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AB5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N1{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-N3{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N6{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N7{fill:url(#streaks-darker);mix-blend-mode:lighten}.light-code{display: block}.dark-code{display: none}]]></style><g id=\"com\"><g class=\"shape\" ><rect x=\"12.000000\" y=\"12.000000\" width=\"433.000000\" height=\"366.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"228.500000\" y=\"45.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">com</text></g><g id=\"com.thealgorithms\"><g class=\"shape\" ><rect x=\"62.000000\" y=\"62.000000\" width=\"333.000000\" height=\"266.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"228.500000\" y=\"91.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">thealgorithms</text></g><g id=\"com.thealgorithms.backtracking\"><g class=\"shape\" ><rect x=\"112.000000\" y=\"112.000000\" width=\"233.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"228.500000\" y=\"137.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">backtracking</text></g><g id=\"com.thealgorithms.backtracking.KnightsTour\"><g class=\"shape\" ><rect x=\"162.000000\" y=\"162.000000\" width=\"133.000000\" height=\"66.000000\" fill=\"#26de81\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"228.500000\" y=\"200.500000\" fill=\"#151719\" class=\"text-bold\" style=\"text-anchor:middle;font-size:16px\">KnightsTour</text></g><mask id=\"d2-3277132633\" maskUnits=\"userSpaceOnUse\" x=\"11\" y=\"11\" width=\"435\" height=\"368\">\n<rect x=\"11\" y=\"11\" width=\"435\" height=\"368\" fill=\"white\"></rect>\n<rect x=\"204.000000\" y=\"17.000000\" width=\"49\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"157.500000\" y=\"67.000000\" width=\"142\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"174.500000\" y=\"117.000000\" width=\"108\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"184.500000\" y=\"184.500000\" width=\"88\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n</mask></svg></svg>\n",
          "d2_src": "direction: down\n\nvars: {\n  d2-config: {\n    pad: 0\n    theme-overrides: {\n      B1: \"#717D86\"\n      B2: \"#717D86\"\n      B3: \"#ffff00\"\n      B4: \"#151719\"\n      B5: \"#151719\"\n      B6: \"#151719\"\n      N1: \"#ECEDED\"\n      N7: \"#151719\"\n      AA2: \"#ECEDED\"\n    }\n  }\n}\n\nstyle: {\n  fill: \"#151719\"\n}\ncom.thealgorithms.backtracking.KnightsTour: {\n  style: {\n    fill: \"#26de81\"\n    font-color: \"#151719\"\n    stroke-width: 0\n  }\n}\n"
        },
        "items": [
          {
            "id": "647aa45c-d971-91a0-0f43-7f4ab375cad2",
            "ancestors": [],
            "description": "Is used to solve Sudoku puzzles by exploring neighboring cells and recursively solving the puzzle until a solution is found or none exists. The class uses a 2D grid represented as an array of integers, with each cell value representing whether it contains a mine or not. The solve method starts at a random location and recursively solves the puzzle by exploring neighboring cells until a solution is found or none exists.",
            "name": "KnightsTour",
            "location": {
              "start": 12,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 2,
                "end": 11
              }
            },
            "item_type": "class",
            "length": 212,
            "docLength": 9
          },
          {
            "id": "8b5910aa-3c5c-dc82-6e4b-87170fa07799",
            "ancestors": [
              "647aa45c-d971-91a0-0f43-7f4ab375cad2"
            ],
            "description": "Iterates over the elements of a linked list and returns the number of elements up to the maximum allowed value.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "the number of nodes in the linked list, calculated by iterating over the list and counting the number of non-null items.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public int size() {\n    restartFromHead: for (;;) {\n        int count = 0;\n        for (Node<E> p = first(); p != null;) {\n            if (p.item != null)\n                if (++count == Integer.MAX_VALUE)\n                    break;  // @see Collection.size()\n            if (p == (p = p.next))\n                continue restartFromHead;\n        }\n        return count;\n    }\n}\n",
              "description": "\nThe example code iterates over each node in the linked list using a for loop and increments a counter variable by 1 every time it finds a non-null item in the current node. The method then returns the value of the counter variable after exiting the for loop. If there is a break statement that exits the for loop, the size method would return Integer.MAX_VALUE if the size of the linked list exceeds Integer.MAX_VALUE."
            },
            "name": "size",
            "location": {
              "start": 19,
              "insert": 13,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 12,
                "end": 18
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 6
          },
          {
            "id": "2356184f-e8f1-25a3-4a40-73f44885a287",
            "ancestors": [
              "647aa45c-d971-91a0-0f43-7f4ab375cad2"
            ],
            "description": "Creates a grid with random values, checks if a specific cell can be filled based on its row and column, and prints the result.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "0 or more command-line arguments passed to the Java program, which are ignored in this case since no action is taken on them.\n\n* Length: `args.length` is equal to 0 or 1.\n* Elements: `args[0]` is the single argument passed to the function, which is typically the base value for the grid.",
                "complex_type": true
              }
            ],
            "name": "main",
            "location": {
              "start": 57,
              "insert": 47,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 46,
                "end": 56
              }
            },
            "item_type": "method",
            "length": 23,
            "docLength": 10
          },
          {
            "id": "b5289fc2-67a3-a2b8-7e4b-030538082505",
            "ancestors": [
              "647aa45c-d971-91a0-0f43-7f4ab375cad2"
            ],
            "description": "Determines if a given cell can be filled with a number, based on the values of its neighbors and the current count. It iterates through neighboring cells, checking if they can be filled and updating the grid accordingly, until a solution is found or none remains.",
            "params": [
              {
                "name": "row",
                "type_name": "int",
                "description": "2D coordinates of a cell in the grid that is being analyzed for orphan detection.",
                "complex_type": false
              },
              {
                "name": "column",
                "type_name": "int",
                "description": "2nd dimension of the grid, which is used to determine the neighbors of a cell and to keep track of the current position in the grid during the algorithm's execution.",
                "complex_type": false
              },
              {
                "name": "count",
                "type_name": "int",
                "description": "1-based position of the current cell in the grid, which is used to determine whether the cell has been visited before and to track the progress of the algorithm.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the Sudoku puzzle is solved or not.",
              "complex_type": false
            },
            "name": "solve",
            "location": {
              "start": 98,
              "insert": 82,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 81,
                "end": 97
              }
            },
            "item_type": "method",
            "length": 25,
            "docLength": 16
          },
          {
            "id": "0f9cc338-ea75-4385-0946-c71db1f15073",
            "ancestors": [
              "647aa45c-d971-91a0-0f43-7f4ab375cad2"
            ],
            "description": "Computes and returns a list of neighboring cells for a given cell in a grid, based on a set of predefined moves and a count of the number of neighbors at each location.",
            "params": [
              {
                "name": "row",
                "type_name": "int",
                "description": "2D coordinate of the cell for which the neighbors are being computed.",
                "complex_type": false
              },
              {
                "name": "column",
                "type_name": "int",
                "description": "2nd dimension of the grid, which is used to determine the coordinates of the neighbors to count and return.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "List",
              "description": "a list of integer arrays containing information about the number of neighbors for each cell in the grid.\n\n1. The list of neighbors is stored in an instance of `List<int[]>`.\n2. Each element of the list is represented by a 3-element array, where the first two elements represent the coordinates of the neighboring cell, and the third element represents the number of neighbors for that cell.",
              "complex_type": true
            },
            "name": "neighbors",
            "location": {
              "start": 144,
              "insert": 124,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 123,
                "end": 143
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 20
          },
          {
            "id": "7c2b81a5-ae8f-2eb4-f64e-2a7beb29b299",
            "ancestors": [
              "647aa45c-d971-91a0-0f43-7f4ab375cad2"
            ],
            "description": "Counts the number of neighbors of a given cell in a grid based on the moves array.",
            "params": [
              {
                "name": "row",
                "type_name": "int",
                "description": "2D coordinate of the cell being analyzed for neighbors.",
                "complex_type": false
              },
              {
                "name": "column",
                "type_name": "int",
                "description": "2D coordinate of the cell being counted for its neighbors, along with the row parameter representing the 2D coordinate of the cell itself.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "the number of neighbors of a given cell in the grid.",
              "complex_type": false
            },
            "name": "countNeighbors",
            "location": {
              "start": 171,
              "insert": 159,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 158,
                "end": 170
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 12
          },
          {
            "id": "42b68aae-067e-acbb-5143-90542f43e014",
            "ancestors": [
              "647aa45c-d971-91a0-0f43-7f4ab375cad2"
            ],
            "description": "Checks if a cell is an orphan by checking its neighbors and verifying that no other cell in those neighbors has zero count. If so, it returns `true`.",
            "params": [
              {
                "name": "count",
                "type_name": "int",
                "description": "2D cell's count of occupied cells adjacent to it, which is used to determine whether an orphan cell exists.",
                "complex_type": false
              },
              {
                "name": "row",
                "type_name": "int",
                "description": "1D coordinate of the current cell being evaluated for orphan status.",
                "complex_type": false
              },
              {
                "name": "column",
                "type_name": "int",
                "description": "2nd dimension of the grid, which is used to determine the neighbors of the given cell.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether an orphan node has been detected in the graph.",
              "complex_type": false
            },
            "name": "orphanDetected",
            "location": {
              "start": 196,
              "insert": 182,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 181,
                "end": 195
              }
            },
            "item_type": "method",
            "length": 11,
            "docLength": 14
          },
          {
            "id": "3e95f59a-c8d9-bbb6-b442-fb208bfde8fe",
            "ancestors": [
              "647aa45c-d971-91a0-0f43-7f4ab375cad2"
            ],
            "description": "Iterates over a 2D grid and prints each element in a column, skipping any elements marked as -1.",
            "params": [],
            "name": "printResult",
            "location": {
              "start": 212,
              "insert": 208,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 207,
                "end": 211
              }
            },
            "item_type": "method",
            "length": 11,
            "docLength": 4
          }
        ]
      }
    }
  }
]